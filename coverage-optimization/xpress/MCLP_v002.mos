model ModelName
uses "mmxprs"; !gain access to the Xpress-Optimizer solver
!uses "mmjava";

parameters
	SOL = ''
	P = ''
	INIT = ''
end-parameters

!load data
declarations
	numberOfPolygons: integer
	numberOfFacilityLocations: integer
	p: integer
	initFile: string
end-declarations

initializations from "jraw:"
	p as ("noindex," + P)
	initFile as ("noindex," + INIT)
end-initializations

initializations from initFile
	numberOfPolygons numberOfFacilityLocations
end-initializations

declarations
	polygonWeight: array (1..numberOfPolygons) of real
  	Y: array(1..numberOfPolygons) of mpvar !demand polygons
  	X: array(1..numberOfFacilityLocations) of mpvar !facility locations
  	n: array(1..numberOfPolygons) of list of integer 	
  	solution: array(1..p) of integer
  	solIndex: integer
end-declarations

initializations from initFile
	polygonWeight n
end-initializations

MCLP := sum(i in 1..numberOfPolygons) polygonWeight(i)*Y(i) 

forall(i in 1..numberOfPolygons) do
	sum(j in n(i)) X(j) >= Y(i)
end-do

sum(j in 1..numberOfFacilityLocations) X(j) = p

forall(i in 1..numberOfPolygons) Y(i) is_binary
forall(i in 1..numberOfFacilityLocations) X(i) is_binary

maximize(MCLP)

!export solution
case getprobstat of
	XPRS_OPT: do	
		solIndex:=1
		forall(j in 1..numberOfFacilityLocations| getsol(X(j))>0.99) do
			
			!writeln("X(",j,") = 1")
			solution(solIndex) := j
			solIndex:=solIndex+1
		end-do
		initializations to 'jraw:'
	 		solution as ("noindex," + SOL)
		end-initializations
	
	end-do
	XPRS_UNF: writeln("Die Berechnungen konnten nicht beendet werden.")
	XPRS_INF: writeln("Das Problem besitzt keine zulässige Lösung.")
	XPRS_UNB: writeln("Die Zielfunktion ist auf der zulässigen Menge unbeschränkt.")
	XPRS_OTH: writeln("Das Problem kann aus unbekannten Gründen nicht gelöst werden.") 
end-case

end-model
